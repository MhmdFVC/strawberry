name: Build
on:
  push:
    branches:
      - master
  pull_request:
    types: [opened, synchronize, reopened]
  release:
    types: [published]

jobs:

  build:
    name: Build and analyze
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - uses: sonarsource/sonarqube-scan-action@v3
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      # If you wish to fail your job when the Quality Gate is red, uncomment the
      # following lines. This would typically be used to fail a deployment.
      # - uses: sonarsource/sonarqube-quality-gate-action@master
      #   timeout-minutes: 5
      #   env:
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  build-debian:
    name: Build Debian
    if: github.repository != 'strawberrymusicplayer/strawberry-private' && (!(github.event.pusher.name == 'strawbsbot' && contains(github.event.head_commit.message, 'New translations')))
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        debian_version: [ 'bookworm', 'trixie' ]
    container:
      image: debian:${{matrix.debian_version}}
    steps:
      - name: Update packages
        run: apt update -y
      - name: Upgrade packages
        run: apt upgrade -y
      - name: Install packages
        env:
          DEBIAN_FRONTEND: noninteractive
        run: >
            apt install -y
            build-essential
            dh-make
            git
            make
            cmake
            gcc
            g++
            pkg-config
            fakeroot
            lsb-release
            dpkg-dev
            libglib2.0-dev
            libboost-dev
            libsqlite3-dev
            libasound2-dev
            libpulse-dev
            libtag1-dev
            libicu-dev
            libgstreamer1.0-dev
            libgstreamer-plugins-base1.0-dev
            gstreamer1.0-alsa
            gstreamer1.0-pulseaudio
            libchromaprint-dev
            libebur128-dev
            libfftw3-dev
            libcdio-dev
            libmtp-dev
            libgpod-dev
            qt6-base-dev
            qt6-base-dev-tools
            qt6-tools-dev
            qt6-tools-dev-tools
            qt6-l10n-tools
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive
      - name: Add safe git directory
        run: git config --global --add safe.directory ${GITHUB_WORKSPACE}
      - name: Create Build Environment
        run: cmake -E make_directory build
      - name: Configure CMake
        run: cmake -S . -B build -DCMAKE_BUILD_TYPE=Debug -DBUILD_WERROR=ON
      - name: make deb
        run: dpkg-buildpackage -b -d -uc -us -nc -j2
      - name: Copy deb
        run: cp ../*.deb .
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: debian-${{matrix.debian_version}}
          path: "*.deb"

  upload:
    name: Upload
    if: (success() || failure()) && github.repository == 'strawberrymusicplayer/strawberry' && (github.event_name == 'release' || (github.event_name == 'push' && github.event.pull_request.head.repo.fork == false && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/ci')))
    runs-on: ubuntu-latest
    needs:
      - build-opensuse
      - build-fedora
      - build-mageia
      - build-debian
      - build-ubuntu
    steps:
      - name: Install packages
        env:
          DEBIAN_FRONTEND: noninteractive
        run: sudo apt install -y git rsync
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      - name: SSH Setup
        uses: shimataro/ssh-key-action@v2
        with:
          known_hosts: ${{secrets.SSH_KNOWN_HOSTS}}
          key: ${{secrets.SSH_KEY}}
      - name: Upload
        run: |
          for i in $(find artifacts -type f); do
            if [ "${{github.event_name}}" = "release" ]; then
              upload_path="${{secrets.RELEASES_PATH}}/"
            else
              distro=$(echo "$i" | cut -d '/' -f 2)
              if [ -z "$(echo "${distro}" | grep '-' || true)" ]; then
                upload_path="${{secrets.BUILDS_PATH}}/${distro}/"
              else
                distro_name=$(echo "${distro}" | cut -d '-' -f 1)
                distro_version=$(echo "${distro}" | cut -d '-' -f 2)
                upload_path="${{secrets.BUILDS_PATH}}/${distro_name}/${distro_version}/"
              fi
            fi
            ssh -p ${{secrets.SSH_PORT}} -o StrictHostKeyChecking=no ${{secrets.SSH_USER}}@${{secrets.SSH_HOST}} mkdir -p ${upload_path}
            rsync -e "ssh -p ${{secrets.SSH_PORT}} -o StrictHostKeyChecking=no" -var $i ${{secrets.SSH_USER}}@${{secrets.SSH_HOST}}:${upload_path}/
          done


  attach:
    name: Attach to release
    if: (success() || failure()) && github.event_name == 'release'
    runs-on: ubuntu-latest
    needs:
      - build-opensuse
      - build-fedora
      - build-mageia
      - build-debian
      - build-ubuntu
    steps:
      - name: Install packages
        env:
          DEBIAN_FRONTEND: noninteractive
        run: sudo apt install -y git jq gh
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Show release assets
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        run: gh release view "${{github.event.release.tag_name}}" --json assets | jq -r '.assets[].name'
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      - name: Add artifacts to release
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        run: |
          echo "Release version: ${{github.event.release.tag_name}}"
          filenames=()
          files=()
          for i in $(find artifacts -type f); do
            filename=$(basename $i)
            if [[ ${filenames[@]} =~ ${filename} ]]; then
              echo "Skipping duplicate file: ${filename}"
              continue
            fi
            filenames+=("${filename}")
            existing_asset=$(gh release view "${{github.event.release.tag_name}}" --json assets | jq -r '.assets[].name' | tr -d '[:blank:]' | grep ".*/${filename}\$" 2>/dev/null || true)
            if [ "${existing_asset}" = "" ]; then
              echo "Adding file: ${filename}"
              files+=("${i}")
            else
              echo "Release already has file: ${filename}"
            fi
          done
          files_list="${files[@]}"
          if ! [ "${files_list}" = "" ]; then
            echo "Adding files to GitHub release"
            gh release upload "${{github.event.release.tag_name}}" ${files_list}
          fi
